(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
module.exports = angular.module('klaxon', []).factory('KlaxonAlert', [
  '$rootScope', '$timeout', function($rootScope, $timeout) {
    var KlaxonAlert;
    return KlaxonAlert = (function() {
      KlaxonAlert.all = [];


      /*
      @param {String} msg - alert message to display
      @param {String} type - type of bootstrap alert (what color)
      @param {String} [key] - key for identifying alert for avoiding duplicates
      @param {Number} [priority] - higher priority takes precedent when two alerts have the same key
      @param {Boolean} [closable] - alert closable by x icon
      @param {String} [callToAction] - clickable message displayed in alert
      @param {Function} [onClick] - callback when call to action is clicked
      @param {Number} [timeout] - timeout for removing the this alert
      @param {String} [debugInfo] - extra info to display inside alert for engineer
       */

      function KlaxonAlert(msg, arg) {
        var ref;
        this.msg = msg;
        ref = arg != null ? arg : {}, this.type = ref.type, this.key = ref.key, this.priority = ref.priority, this.closable = ref.closable, this.callToAction = ref.callToAction, this.onClick = ref.onClick, this.debugInfo = ref.debugInfo, this.timeout = ref.timeout;
        if (this.type == null) {
          this.type = 'info';
        }
        if (this.closable == null) {
          this.closable = true;
        }
      }

      KlaxonAlert.prototype.click = function($event) {
        if ($event != null) {
          $event.preventDefault();
        }
        return typeof this.onClick === "function" ? this.onClick($event) : void 0;
      };


      /*
      Add alert to list of displayed alerts
       */

      KlaxonAlert.prototype.add = function() {
        var appendAlert;
        if (this.getIndex() != null) {
          return;
        }
        appendAlert = true;
        if (this.key && KlaxonAlert.all.some((function(_this) {
          return function(alert) {
            return alert.key === _this.key;
          };
        })(this))) {
          KlaxonAlert.all.forEach((function(_this) {
            return function(alert) {
              if (alert.key !== _this.key) {
                return;
              }
              if (alert.priority > _this.priority) {
                return appendAlert = false;
              } else {
                return alert.close();
              }
            };
          })(this));
        }
        if (!appendAlert) {
          return;
        }
        KlaxonAlert.all.push(this);
        if (this.timeout != null) {
          $timeout(this.close.bind(this), this.timeout);
        }
        return $rootScope.$broadcast('klaxon.alertAdded', this);
      };

      KlaxonAlert.prototype.close = function($event) {
        var index;
        if ($event != null) {
          if (typeof $event.preventDefault === "function") {
            $event.preventDefault();
          }
        }
        index = this.getIndex();
        if (index == null) {
          return;
        }
        return KlaxonAlert.all.splice(index, 1);
      };

      KlaxonAlert.prototype.getIndex = function() {
        var alert, i, index, len, ref;
        ref = KlaxonAlert.all;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          alert = ref[index];
          if (alert === this) {
            return index;
          }
        }
      };

      return KlaxonAlert;

    })();
  }
]).directive('klaxonAlert', function() {
  return {
    restrict: 'E',
    scope: {
      alert: '=data'
    },
    template: "<div\n  class='alert'\n  ng-class=\"['alert-' + (alert.type || 'warning'), alert.closable ? 'alert-dismissable' : null]\"\n  role=\"alert\"\n>\n  <button\n    ng-show=\"alert.closable\"\n    type=\"button\"\n    class=\"close\"\n    ng-click=\"alert.close($event)\"\n  >\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">Close</span>\n  </button>\n\n  {{ alert.msg }}&nbsp;\n\n  <a\n    class='alert-link'\n    ng-if='alert.callToAction'\n    ng-click='alert.click($event)'\n    href='#'\n  >\n    {{alert.callToAction}}\n  </a>\n\n  <div\n    class='debug-info'\n    ng-if='alert.debugInfo'\n  >\n    {{ alert.debugInfo }}\n  </div>\n</div>"
  };
}).directive('klaxonAlertContainer', [
  'KlaxonAlert', function(KlaxonAlert) {
    return {
      restrict: 'E',
      template: "<div class='alerts' ng-if='alerts.length > 0'>\n  <klaxon-alert data='alert' ng-repeat='alert in alerts'></alert>\n</div>",
      link: function(scope, element, attrs) {
        scope.alerts = KlaxonAlert.all;
        return scope.$on('klaxon.alertAdded', function() {
          scope.alerts = KlaxonAlert.all;
          if (!scope.$$phase) {
            return scope.$digest();
          }
        });
      }
    };
  }
]);

},{}]},{},[1])